# Copyright (C) 2016    Gabriele D'Angelo <g.dangelo@unibo.it>
# License: GNU General Public License version 3, or any later version

#
# Configuration values for the pads analysis
#

# Location of the anonymized database dump (db-dumper/)
DB_FILE="dump.sql"

# Results directory
RESULTS="results/"

# Temporary location for data processing
# WARNING: a large amount of free space might be necessary
TMP_DIR="/tmp/rtce-tmp"

# Location of the pads dumps used during the processing
PADS_DIR="$TMP_DIR/PADS"

# Pads that have to be filetered
FILTERFILE="$TMP_DIR/RTCE_PADS-BLACKLIST.txt"

# Time windows
TIME_WIN_SIZE="5 10 60"

# Space windows
SPACE_WIN_SIZE="10 80 400 800"

# Number of parallel instances of the script to be executed
# SOCKETS=`lscpu | grep "Socket(s)" | cut -d":" -f2 | cut -f14 -d" "`
# COREPERSOCKET=`lscpu | grep "Core(s) per socket" | cut -d":" -f2 | cut -f5 -d" "`
# CPUNUM=`echo $SOCKETS \\* $COREPERSOCKET | bc`
# NUM_PROC=$CPUNUM

## From https://stackoverflow.com/questions/6481005/how-to-obtain-the-number-of-cpus-cores-in-linux-from-the-command-line
# macOS:           Use `sysctl -n hw.*cpu_max`, which returns the values of 
#                  interest directly.
#                  CAVEAT: Using the "_max" key suffixes means that the *maximum*
#                          available number of CPUs is reported, whereas the
#                          current power-management mode could make *fewer* CPUs 
#                          available; dropping the "_max" suffix would report the
#                          number of *currently* available ones; see [1] below.
#
# Linux:           Parse output from `lscpu -p`, where each output line represents
#                  a distinct (logical) CPU.
#                  Note: Newer versions of `lscpu` support more flexible output
#                        formats, but we stick with the parseable legacy format 
#                        generated by `-p` to support older distros, too.
#                        `-p` reports *online* CPUs only - i.e., on hot-pluggable 
#                        systems, currently disabled (offline) CPUs are NOT
#                        reported.

# Number of LOGICAL CPUs (includes those reported by hyper-threading cores)
  # Linux: Simply count the number of (non-comment) output lines from `lscpu -p`, 
  # which tells us the number of *logical* CPUs.
NUM_PROC=$([ $(uname) = 'Darwin' ] && 
                       sysctl -n hw.logicalcpu_max || 
                       lscpu -p | egrep -v '^#' | wc -l)

# Number of PHYSICAL CPUs (cores).
  # Linux: The 2nd column contains the core ID, with each core ID having 1 or
  #        - in the case of hyperthreading - more logical CPUs.
  #        Counting the *unique* cores across lines tells us the
  #        number of *physical* CPUs (cores).
physicalCpuCount=$([ $(uname) = 'Darwin' ] && 
                       sysctl -n hw.physicalcpu_max ||
                       lscpu -p | egrep -v '^#' | sort -u -t, -k 2,4 | wc -l)

